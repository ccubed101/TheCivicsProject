{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/@angular/router/router.d.ts.ÉµEmptyOutletComponent.html","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/app.server.module.ts","webpack:///./src/app/commands-module/command/command.component.html","webpack:///./src/app/commands-module/command/command.component.ts","webpack:///./src/app/commands-module/commands-panel/commands-panel.component.html","webpack:///./src/app/commands-module/commands-panel/commands-panel.component.ts","webpack:///./src/app/commands-module/commands-routing.module.ts","webpack:///./src/app/commands-module/commands.module.ts","webpack:///./src/app/core-module/Sample.service.ts","webpack:///./src/app/core-module/core.module.ts","webpack:///./src/app/core-module/resolvers/sample-resolver.service.ts","webpack:///./src/app/counter/counter.component.html","webpack:///./src/app/counter/counter.component.ts","webpack:///./src/app/fetch-data/fetch-data.component.html","webpack:///./src/app/fetch-data/fetch-data.component.ts","webpack:///./src/app/home/home.component.html","webpack:///./src/app/home/home.component.ts","webpack:///./src/app/map-module/map-panel-routing.module.ts","webpack:///./src/app/map-module/map-panel.module.ts","webpack:///./src/app/map-module/map-panel/map-panel.component.html","webpack:///./src/app/map-module/map-panel/map-panel.component.ts","webpack:///./src/app/preload-strategy.ts","webpack:///./src/app/shared-module/SharedSampleService.ts","webpack:///./src/app/shared-module/shared-routing.module.ts","webpack:///./src/app/shared-module/shared.module.ts","webpack:///./src/app/views/authentication-module/authentication-routing.module.ts","webpack:///./src/app/views/authentication-module/authentication.module.ts","webpack:///./src/app/views/authentication-module/components/authorization-component/authorization.component.ts.AuthorizationComponent.html","webpack:///./src/app/views/authentication-module/components/authorization-component/authorization.component.ts","webpack:///./src/app/views/authentication-module/components/authorization-component/authorization.model.ts","webpack:///./src/app/views/authentication-module/components/login-component/Login.Model.ts","webpack:///./src/app/views/authentication-module/components/login-component/login.component.ts.LoginComponent.html","webpack:///./src/app/views/authentication-module/components/login-component/login.component.ts","webpack:///./src/app/views/authentication-module/components/login-register-component/login-register.component.ts.LoginRegisterComponent.html","webpack:///./src/app/views/authentication-module/components/login-register-component/login-register.component.ts","webpack:///./src/app/views/authentication-module/components/logout-component/logout.component.ts.LogoutComponent.html","webpack:///./src/app/views/authentication-module/components/logout-component/logout.component.ts","webpack:///./src/app/views/authentication-module/components/register-component/register.component.ts.RegisterComponent.html","webpack:///./src/app/views/authentication-module/components/register-component/register.component.ts","webpack:///./src/app/views/authentication-module/components/register-component/register.model.ts","webpack:///./src/app/views/authentication-module/guards/authentication.guard.ts","webpack:///./src/app/views/authentication-module/guards/can-activate-child.guard.ts","webpack:///./src/app/views/authentication-module/guards/can-activate.guard.ts","webpack:///./src/app/views/authentication-module/guards/can-deactivate.guard.ts","webpack:///./src/app/views/authentication-module/guards/can-load.guard.ts","webpack:///./src/app/views/authentication-module/services/authentication.service.ts","webpack:///./src/app/views/authentication-module/services/authorization.service.ts","webpack:///./src/app/views/feature1-module/feat1-comp1-component/feat1-comp1.component.html","webpack:///./src/app/views/feature1-module/feat1-comp1-component/feat1-comp1.component.ts","webpack:///./src/app/views/feature1-module/feature1-routing.module.ts","webpack:///./src/app/views/feature1-module/feature1.module.ts","webpack:///./src/app/views/feature2-module/feat2-comp1-component/feat2-comp1.component.html","webpack:///./src/app/views/feature2-module/feat2-comp1-component/feat2-comp1.component.ts","webpack:///./src/app/views/feature2-module/feat2-comp2-component/feat2-comp2.component.ts.Feat2Comp2Component.html","webpack:///./src/app/views/feature2-module/feat2-comp2-component/feat2-comp2.component.ts","webpack:///./src/app/views/feature2-module/feature2-routing.module.ts","webpack:///./src/app/views/feature2-module/feature2.module.ts","webpack:///./src/app/views/no-lazy-load-module/no-lazy-load.module.ts","webpack:///./src/main.server.ts","webpack:///external \"@angular/animations\"","webpack:///external \"@angular/animations/browser\"","webpack:///external \"@angular/common\"","webpack:///external \"@angular/common/http\"","webpack:///external \"@angular/core\"","webpack:///external \"@angular/forms\"","webpack:///external \"@angular/http\"","webpack:///external \"@angular/platform-browser\"","webpack:///external \"@angular/platform-browser/animations\"","webpack:///external \"@angular/platform-server\"","webpack:///external \"@angular/router\"","webpack:///external \"@nguniversal/module-map-ngfactory-loader\"","webpack:///external \"rxjs\"","webpack:///external \"rxjs/operators\""],"names":[],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","<router-outlet></router-outlet>","import { NgModule, ModuleWithProviders  } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { HomeComponent } from './home/home.component';\r\nimport { CounterComponent } from './counter/counter.component';\r\nimport { FetchDataComponent } from './fetch-data/fetch-data.component';\r\nimport { NoLazyLoadingEntrypoint } from './views/no-lazy-load-module/no-lazy-load.module';\r\nimport { PreloadStrategy } from './preload-strategy';\r\nimport { AuthenticationGuard } from './views/authentication-module/guards/authentication.guard'\r\nimport { CanActivateGuard } from './views/authentication-module/guards/can-activate.guard';\r\nimport { CanLoadGuard } from './views/authentication-module/guards/can-load.guard'\r\n\r\n// Temporary\r\nimport { LoginComponent } from './views/authentication-module/components/login-component/login.component'\r\nimport { RegisterComponent } from './views/authentication-module/components/register-component/register.component'\r\nimport { LoginRegisterComponent } from './views/authentication-module/components/login-register-component/login-register.component'\r\n\r\nconst routes: Routes = [\r\n\r\n    { path: '', redirectTo: 'login-register', pathMatch: 'full' },\r\n\r\n    // The following routes are to components that are defined in modules that are\r\n    // imported into the main application module (see app.module.ts).\r\n    { path: 'home', component: HomeComponent, canActivate: [ AuthenticationGuard, CanActivateGuard ] },\r\n    { path: 'counter', component: CounterComponent, outlet: 'secondary' },\r\n    { path: 'fetch-data', component: FetchDataComponent },\r\n\r\n    // Temporary\r\n    { path: 'login', component: LoginComponent },\r\n    { path: 'register', component: RegisterComponent },\r\n    { path: 'login-register', component: LoginRegisterComponent },\r\n\r\n    // The following modules are lazy loaded.  The objective is to make sure that any\r\n    // type defined in the lazy loaded modules are not reference anywhere but in the\r\n    // modules themselves.  In this way the modules are self-contained and loosely coupled\r\n    // witht the rest of the application.\r\n    { path: 'primary-panel', loadChildren: 'app/views/feature1-module/feature1.module#Feature1Module', canLoad: [CanLoadGuard], data: { preload: false } },\r\n    { path: 'secondary-panel', loadChildren: 'app/views/feature2-module/feature2.module#Feature2Module', canLoad: [CanLoadGuard], outlet: 'secondary', data: { preload: false } },\r\n    { path: 'primary-panel', loadChildren: 'app/map-module/map-panel.module#MapPanelModule', data: { preload: false } },\r\n    { path: 'secondary-panel', loadChildren: 'app/commands-module/commands.module#CommandsModule', outlet: 'secondary', data: { preload: false } },\r\n\r\n    // An example of a lazy loaded module that is prevented from being lazy loaded.\r\n    { path: 'no-lazy-load-panel', loadChildren: NoLazyLoadingEntrypoint },\r\n\r\n    // ?\r\n    { path: '**', redirectTo: 'home' }\r\n\r\n\r\n\r\n\r\n    //{ path: '', component: ProxyMapComponent, pathMatch: 'full' },\r\n    //{ path: 'map-panel', loadChildren: 'app/map-module/map-panel.module#MapPanelModule', data: { preload: false } },\r\n    //{ path: 'commands-panel', loadChildren: 'app/commands-module/commands.module#CommandsModule', data: { preload: false } },\r\n    //{ path: 'no-lazy-load-panel', loadChildren: NoLazyLoadingEntrypoint },\r\n];\r\n\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes, { preloadingStrategy: PreloadStrategy/*, enableTracing: true*/ })],\r\n  exports: [RouterModule],\r\n  providers: [ PreloadStrategy ]\r\n})\r\nexport class AppRoutingModule { }\r\n\r\n","<div style=\"display:grid; background-color:cyan; grid-template-columns: 50% 50%; grid-template-rows: 200px 581px; align-content: center; text-align: center\">\r\n\r\n  <div style=\"background-color: red; grid-column: 1 / span 2\">\r\n    <div>Marquee</div>\r\n    <div>\r\n      <ul>\r\n        <li [routerLinkActive]='[\"link-active\"]' [routerLinkActiveOptions]='{ exact: true }'>\r\n          <a [routerLink]='[\"/home\"]'>\r\n            <span class='glyphicon glyphicon-home'></span> Home\r\n          </a>\r\n        </li>\r\n        <li [routerLinkActive]='[\"link-active\"]'>\r\n          <a [routerLink]=\"[{ outlets: { secondary: ['counter'] } } ]\">\r\n            <span class='glyphicon glyphicon-th-list'></span> Counter\r\n          </a>\r\n        </li>\r\n        <li [routerLinkActive]='[\"link-active\"]'>\r\n          <a [routerLink]='[\"/fetch-data\"]'>\r\n            <span class='glyphicon glyphicon-th-list'></span> Fetch data\r\n          </a>\r\n        </li>\r\n        <li [routerLinkActive]='[\"link-active\"]'>\r\n          <a [routerLink]='[\"/primary-panel\"]'>\r\n            <span class='glyphicon'></span>Load \"Feature1Module\" from \"src/app/views/feature1-module/feature1.module.ts\" into \"primary\" panel\r\n          </a>\r\n        </li>\r\n        <li [routerLinkActive]='[\"link-active\"]'>\r\n          <a [routerLink]=\"[{ outlets: { secondary: ['secondary-panel'] } } ]\">\r\n            <span class='glyphicon'></span>Load \"Feature2Module\" from \"src/app/views/feature2-module/feature2.module.ts\" into \"secondary\" panel\r\n          </a>\r\n        </li>\r\n        <li [routerLinkActive]='[\"link-active\"]'>\r\n          <a [routerLink]='[\"/no-lazy-load-panel\"]'>\r\n            <span class='glyphicon'></span>Load \"NoLazyLoadModule\" from \"src/app/views/no-lazy-load-module/no-lazy-load.module.ts\" into \"primary\" panel\r\n          </a>\r\n        </li>\r\n        <!--<li [routerLinkActive]='[\"link-active\"]'>\r\n          <a [routerLink]=\"[{ outlets: { primary: ['path'], outlet-name: ['path'] } } ]\">\r\n            <span class='glyphicon glyphicon-th-list'></span>Commands Panel\r\n          </a>\r\n        </li>-->\r\n      </ul>\r\n    </div>\r\n  </div>\r\n\r\n  <div>\r\n    <router-outlet></router-outlet>\r\n  </div>\r\n\r\n  <div style=\"background-color: lightblue\">\r\n    <router-outlet name=\"secondary\"></router-outlet>\r\n  </div>\r\n\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n<!--<div class='container-fluid'>\r\n  <div class='row'>\r\n    <div class='col-sm-3'>\r\n      <app-nav-menu></app-nav-menu>\r\n    </div>\r\n    <div class='col-sm-9 body-content'>\r\n      <router-outlet></router-outlet>\r\n    </div>\r\n  </div>\r\n</div>-->\r\n","import { Component } from '@angular/core';\r\n\r\nimport { Observable, of, from, range, pipe } from 'rxjs'\r\nimport { filter, catchError, reduce } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'app';\r\n\r\n  ngOnInit() {\r\n\r\n    let observable1: Observable<number> = range(0, 10);\r\n    let observable2 = from([11, 22, 33]);\r\n\r\n    observable1\r\n      .pipe(\r\n      reduce((x, y) => { console.log(x); console.log(y); return x + y; })\r\n      )\r\n      .subscribe(\r\n      this.next,\r\n      () => console.log('Error'),\r\n      () => console.log('Done')\r\n    );\r\n\r\n  }\r\n\r\n  next(x: any) {\r\n\r\n      console.log('The number is ' + x);\r\n  }\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { RouterModule } from '@angular/router';\r\n\r\nimport { PLATFORM_ID, APP_ID, Inject } from '@angular/core';    // Added for Angular Universal app.\r\nimport { isPlatformBrowser } from '@angular/common';            // Added for Angular Universal app.\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AuthenticationModule} from './views/authentication-module/authentication.module'\r\nimport { AppComponent } from './app.component';\r\nimport { NavMenuComponent } from './nav-menu/nav-menu.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { CounterComponent } from './counter/counter.component';\r\nimport { FetchDataComponent } from './fetch-data/fetch-data.component';\r\nimport { CoreModule } from './core-module/core.module';\r\nimport { SharedModule } from './shared-module/shared.module';\r\nimport { MenuComponent } from './menu/menu.component';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        AppComponent,\r\n        NavMenuComponent,\r\n        HomeComponent,\r\n        CounterComponent,\r\n        FetchDataComponent,\r\n        MenuComponent,\r\n    ],\r\n    imports: [\r\n        BrowserModule.withServerTransition({ appId: 'tcp-universal' }),     // Angular Universal.\r\n        HttpClientModule,\r\n        FormsModule,\r\n        AppRoutingModule,\r\n        AuthenticationModule,           // This module cannot be lazy loaded because its API consists of router guards used in routes in app-routing.module.ts.\r\n        CoreModule,                     // For application wide (global) services.\r\n        SharedModule.forRoot()          // This will add service providers from SharedModule to AppModule's service providers.\r\n    ],\r\n    providers: [],\r\n    bootstrap: [AppComponent]\r\n})\r\nexport class AppModule {\r\n\r\n    // Angular Universal.\r\n    constructor(\r\n        @Inject(PLATFORM_ID) private platformId: Object,\r\n        @Inject(APP_ID) private appId: string) {\r\n        const platform = isPlatformBrowser(platformId) ?\r\n            'in the browser' : 'on the server';\r\n        console.log(`Running ${platform} with appId=${appId}`);\r\n    }\r\n\r\n\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { ServerModule } from '@angular/platform-server';\r\nimport { ModuleMapLoaderModule } from '@nguniversal/module-map-ngfactory-loader';\r\n\r\nimport { AppModule } from './app.module';\r\nimport { AppComponent } from './app.component';\r\n\r\n// Added to support Angular Universal.\r\n// The Angular CLI uses the AppServerModule to build the server-side bundle.\r\n\r\n@NgModule({\r\n    imports: [\r\n        AppModule,\r\n        ServerModule,\r\n        ModuleMapLoaderModule           // Server-side module that allows lazy-loading of routes.\r\n    ],\r\n    providers: [\r\n        // Add universal-only providers here\r\n    ],\r\n    bootstrap: [AppComponent],\r\n})\r\nexport class AppServerModule { }\r\n","<p>\n  command works!\n</p>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-command',\n  templateUrl: './command.component.html',\n  styleUrls: ['./command.component.css']\n})\nexport class CommandComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","<p>\r\n  commands-panel works! String is {{ServiceString}}\r\n</p>\r\n<a [routerLink]=\"[{ outlets: { primary: ['command'] } } ]\">\r\n  <span class='glyphicon glyphicon-home'></span> Load Command component!\r\n</a>\r\n<router-outlet></router-outlet>\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\nimport { SampleService } from '../../core-module/Sample.service';\r\n\r\n@Component({\r\n  selector: 'app-commands-panel',\r\n  templateUrl: './commands-panel.component.html',\r\n  styleUrls: ['./commands-panel.component.css']\r\n})\r\nexport class CommandsPanelComponent implements OnInit {\r\n\r\n  constructor(private sampleService: SampleService) {\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  public get ServiceString(): string {\r\n    return this.sampleService.SampleString;\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { CommandsPanelComponent } from './commands-panel/commands-panel.component';\r\nimport { CommandComponent } from './command/command.component';\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: CommandsPanelComponent, children: [\r\n      { path: 'command', component: CommandComponent },\r\n    ]\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class CommandsRoutingModule { }\r\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CommandsRoutingModule } from './commands-routing.module';\nimport { CommandsPanelComponent } from './commands-panel/commands-panel.component';\nimport { CommandComponent } from './command/command.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CommandsRoutingModule,\n  ],\n  declarations: [\n    CommandsPanelComponent,\n    CommandComponent\n  ]\n})\nexport class CommandsModule {\n}\n","export class SampleService {\r\n\r\n  private str: string = \"String from SampleService in src/app/core-module/Sample.service.ts\";\r\n\r\n  public get SampleString(): string {\r\n    return this.str;\r\n  }\r\n  public set SampleString(s: string) {\r\n    this.str = s;\r\n  }\r\n\r\n}\r\n\r\n","import { NgModule, Optional, SkipSelf } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { SampleService } from './Sample.service';\r\nimport { SampleResolverService } from './resolvers/sample-resolver.service';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule\r\n        , FormsModule\r\n    ],\r\n    providers: [\r\n        SampleService\r\n        , SampleResolverService\r\n    ],\r\n    declarations: []\r\n})\r\nexport class CoreModule {\r\n\r\n  // Construction\r\n    constructor(@Optional() @SkipSelf() core: CoreModule) {\r\n        if (core) {\r\n            throw new Error(\"A CoreModule has already been instantiated.  CoreModule should only be imported into AppModule and nowhere else.\");\r\n        }\r\n    }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Resolve } from '@angular/router';\r\nimport { Observable, of } from 'rxjs';\r\nimport { delay } from 'rxjs/operators';\r\n\r\n// A route resolver allows you to get data before navigating to a new route.\r\n\r\n@Injectable()\r\nexport class SampleResolverService implements Resolve<Observable<string>> {\r\n  constructor() { }\r\n\r\n  resolve() {\r\n    return of('String from SampleResolverService in src/app/core-module/resolvers/sample-resolver.service.ts.');\r\n  }\r\n}\r\n","<h1>Counter</h1>\r\n\r\n<p>This is a simple example of an Angular component.</p>\r\n\r\n<p>Current count: <strong>{{ currentCount }}</strong></p>\r\n\r\n<button (click)=\"incrementCounter()\">Increment</button>\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-counter-component',\r\n  templateUrl: './counter.component.html'\r\n})\r\nexport class CounterComponent {\r\n  public currentCount = 0;\r\n\r\n  public incrementCounter() {\r\n    this.currentCount++;\r\n  }\r\n}\r\n","<h1>Weather forecast</h1>\r\n\r\n<p>This component demonstrates fetching data from the server.</p>\r\n\r\n<p *ngIf=\"!forecasts\"><em>Loading...</em></p>\r\n\r\n<table class='table' *ngIf=\"forecasts\">\r\n  <thead>\r\n    <tr>\r\n      <th>Date</th>\r\n      <th>Temp. (C)</th>\r\n      <th>Temp. (F)</th>\r\n      <th>Summary</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr *ngFor=\"let forecast of forecasts\">\r\n      <td>{{ forecast.dateFormatted }}</td>\r\n      <td>{{ forecast.temperatureC }}</td>\r\n      <td>{{ forecast.temperatureF }}</td>\r\n      <td>{{ forecast.summary }}</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n","import { Component, Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Component({\r\n  selector: 'app-fetch-data',\r\n  templateUrl: './fetch-data.component.html'\r\n})\r\nexport class FetchDataComponent {\r\n  public forecasts: WeatherForecast[];\r\n\r\n  constructor(http: HttpClient, @Inject('BASE_URL') baseUrl: string) {\r\n    http.get<WeatherForecast[]>(baseUrl + 'api/SampleData/WeatherForecasts').subscribe(result => {\r\n      this.forecasts = result;\r\n    }, error => console.error(error));\r\n  }\r\n}\r\n\r\ninterface WeatherForecast {\r\n  dateFormatted: string;\r\n  temperatureC: number;\r\n  temperatureF: number;\r\n  summary: string;\r\n}\r\n","<h1>Hello, world!</h1>\r\n<p>Welcome to your new single-page application, built with:</p>\r\n<ul>\r\n  <li><a href='https://get.asp.net/'>ASP.NET Core</a> and <a href='https://msdn.microsoft.com/en-us/library/67ef8sbd.aspx'>C#</a> for cross-platform server-side code</li>\r\n  <li><a href='https://angular.io/'>Angular</a> and <a href='http://www.typescriptlang.org/'>TypeScript</a> for client-side code</li>\r\n  <li><a href='http://getbootstrap.com/'>Bootstrap</a> for layout and styling</li>\r\n</ul>\r\n<p>To help you get started, we've also set up:</p>\r\n<ul>\r\n  <li><strong>Client-side navigation</strong>. For example, click <em>Counter</em> then <em>Back</em> to return here.</li>\r\n  <li><strong>Angular CLI integration</strong>. In development mode, there's no need to run <code>ng serve</code>. It runs in the background automatically, so your client-side resources are dynamically built on demand and the page refreshes when you modify any file.</li>\r\n  <li><strong>Efficient production builds</strong>. In production mode, development-time features are disabled, and your <code>dotnet publish</code> configuration automatically invokes <code>ng build</code> to produce minified, ahead-of-time compiled JavaScript files.</li>\r\n</ul>\r\n<p>The <code>ClientApp</code> subdirectory is a standard Angular CLI application. If you open a command prompt in that directory, you can run any <code>ng</code> command (e.g., <code>ng test</code>), or use <code>npm</code> to install extra packages into it.</p>\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n})\r\nexport class HomeComponent {\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { MapPanelComponent } from './map-panel/map-panel.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '', component: MapPanelComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class MapPanelRoutingModule { }\r\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { MapPanelRoutingModule } from './map-panel-routing.module';\nimport { MapPanelComponent } from './map-panel/map-panel.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MapPanelRoutingModule\n  ],\n  declarations: [\n    MapPanelComponent\n  ]\n})\nexport class MapPanelModule { }\n","<p>\r\n  map-panel works! String is {{ServiceString}} XXX\r\n</p>\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\nimport { SampleService } from '../../core-module/Sample.service';\r\nimport { SharedSampleService } from '../../shared-module/SharedSampleService';\r\n\r\n@Component({\r\n  selector: 'map-panel',\r\n  templateUrl: './map-panel.component.html',\r\n  styleUrls: ['./map-panel.component.css']\r\n})\r\nexport class MapPanelComponent implements OnInit {\r\n\r\n  constructor(\r\n    private sampleService: SampleService,\r\n    private sharedSampleService: SharedSampleService\r\n  ) {\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  public get ServiceString(): string {\r\n    return this.sharedSampleService.SampleString;\r\n  }\r\n}\r\n","import { Routes, Route, RouterModule, PreloadingStrategy } from '@angular/router';\r\nimport { Observable, of } from 'rxjs';\r\n\r\nexport class PreloadStrategy implements PreloadingStrategy {\r\n  preload(route: Route, load: Function): Observable<any> {\r\n    return route.data && route.data.preload ? load() : of(null);\r\n  }\r\n}\r\n","export class SharedSampleService {\r\n\r\n  private str: string = \"Shared Sample Service\";\r\n\r\n  public get SampleString(): string {\r\n    return this.str;\r\n  }\r\n  public set SampleString(s: string) {\r\n    this.str = s;\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class SharedRoutingModule { }\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { SharedRoutingModule } from './shared-routing.module';\r\nimport { SharedSampleService } from './SharedSampleService';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    SharedRoutingModule\r\n  ],\r\n  declarations: []\r\n})\r\nexport class SharedModule {\r\n\r\n  // This method is part of the mechanism that makes injectable services in this \"SharedModule\" available\r\n  // to lazy loaded feature modules.  (If the lazy loaded feature modules imported this shared module then\r\n  // any services created by the lazy loaded feature module would their own instances--which would be a\r\n  // problem is what you wanted was an application wide singleton service.\r\n  // This method returns an object that is imported into the AppModule.  The object specifies the shared\r\n  // services which then added to the providers defined by the AppModule.\r\n  // (The \"forRoot\" name is a convention adopted by a lot of Angular libraries, but of course you could name\r\n  // that static method however you want.)\r\n  static forRoot() {\r\n\r\n    // interface ModuleWithProviders {\r\n    // \r\n    return {\r\n      ngModule: SharedModule,\r\n      providers: [ /* List services here. */ SharedSampleService ]\r\n    }\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { LoginComponent } from './components/login-component/login.component';\r\nimport { RegisterComponent } from './components/register-component/register.component';\r\nimport { LoginRegisterComponent } from './components/login-register-component/login-register.component';\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: LoginRegisterComponent },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AuthenticationRoutingModule { }\r\n\r\n","import { NgModule, InjectionToken } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { AuthenticationRoutingModule } from './authentication-routing.module';\r\nimport { LoginRegisterComponent } from './components/login-register-component/login-register.component';\r\nimport { LoginComponent } from './components/login-component/login.component';\r\nimport { AuthorizationComponent } from './components/authorization-component/authorization.component';\r\nimport { LogoutComponent } from './components/logout-component/logout.component';\r\nimport { RegisterComponent } from './components/register-component/register.component';\r\nimport { AuthenticationService } from './services/authentication.service';\r\nimport { AuthenticationGuard } from './guards/authentication.guard';\r\nimport { CanActivateChildGuard } from './guards/can-activate-child.guard';\r\nimport { CanDeactivateGuard } from './guards/can-deactivate.guard';\r\nimport { CanLoadGuard } from './guards/can-load.guard';\r\nimport { CanActivateGuard } from './guards/can-activate.guard';\r\nimport { AuthorizationService } from './services/authorization.service';\r\n\r\nexport const AUTH_GUARD = new InjectionToken('app.config');\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule\r\n        , FormsModule\r\n        , AuthenticationRoutingModule\r\n    ],\r\n    providers: [\r\n        AuthenticationService           // TODO: If API of this module consists only of router guards then there should be no provider for this service.\r\n        , AuthenticationGuard\r\n        , CanActivateGuard\r\n        , CanActivateChildGuard\r\n        , CanDeactivateGuard\r\n        , CanLoadGuard\r\n        , AuthorizationService\r\n    ],\r\n    declarations: [\r\n        LoginRegisterComponent\r\n        , LoginComponent\r\n        , LogoutComponent\r\n        , RegisterComponent\r\n        , AuthorizationComponent\r\n    ]\r\n})\r\nexport class AuthenticationModule {\r\n}\r\n","\n        <div>\n            <button type=\"button\" (click)=\"onClick()\">Administrator</button>\n        </div>\n    ","import { Component, Inject } from '@angular/core';\r\n\r\nimport { IAuthorizationService, AuthorizationService } from '../../services/authorization.service';\r\nimport { AuthorizationModel } from './authorization.model'\r\n\r\n@Component({\r\n    selector: 'authorization',\r\n    template: `\r\n        <div>\r\n            <button type=\"button\" (click)=\"onClick()\">Administrator</button>\r\n        </div>\r\n    `,\r\n})\r\nexport class AuthorizationComponent {\r\n\r\n    // Construction.\r\n\r\n    constructor(\r\n        @Inject(AuthorizationService) private authorizationService: IAuthorizationService\r\n    ) { }\r\n\r\n\r\n    // Instance variables.\r\n\r\n    authorizationModel: AuthorizationModel = new AuthorizationModel();\r\n\r\n\r\n    // Property accessors.\r\n\r\n    public get AuthorizationModel(): AuthorizationModel {\r\n        return this.authorizationModel;\r\n    }\r\n\r\n\r\n    // Event handlers.\r\n\r\n    public onClick() {\r\n        this.authorizationService.AddAdministratorAuthorization()\r\n            .subscribe(\r\n                httpResponse => {\r\n                    console.log(httpResponse)\r\n                },\r\n        );\r\n    }\r\n\r\n}\r\n","export class AuthorizationModel {\r\n\r\n    // Construction\r\n\r\n    constructor(\r\n        private isAdmin?: boolean\r\n    ) {\r\n    }\r\n\r\n\r\n    // Property accessors.\r\n\r\n    public get IsAdmin(): boolean {\r\n        return this.isAdmin;\r\n    }\r\n    public set IsAdmin(value: boolean) {\r\n        this.isAdmin = value;\r\n    }\r\n}\r\n","export class LoginModel {\r\n\r\n    // Construction\r\n\r\n    constructor(\r\n        private userName?: string\r\n        , private password?: string\r\n    ) {\r\n    }\r\n\r\n\r\n    // Property accessors.\r\n\r\n    public get UserName(): string {\r\n        return this.userName;\r\n    }\r\n    public set UserName(value: string) {\r\n        this.userName = value;\r\n    }\r\n\r\n    public get Password(): string {\r\n        return this.password;\r\n    }\r\n    public set Password(value: string) {\r\n        this.password = value;\r\n    }\r\n}\r\n","\n        <div>\n\n        <form (ngSubmit)=\"onSubmit()\" #loginForm=\"ngForm\">\n\n            <div class=\"grid-container\">\n\n                <div class=\"grid-item title\">\n                    <h1>Login</h1>\n                </div>\n\n                <div class=\"grid-item label-item\">\n                  <label for=\"username\">Username:</label>\n                </div>\n                <div class=\"grid-item input-item\">\n                  <input type=\"text\" id=\"login-username\" required [(ngModel)]=\"LoginModel.UserName\" name=\"UserName\" #username=\"ngModel\">\n                </div>\n\n                <div class=\"grid-item label-item\">\n                  <label for=\"password\">Password:</label>\n                </div>\n                <div class=\"grid-item input-item\">\n                  <input type=\"password\" id=\"login-password\" required [(ngModel)]=\"LoginModel.Password\" name=\"Password\" #password=\"ngModel\">\n                </div>\n\n                <div class=\"grid-item submit\">\n                    <button type=\"submit\" [disabled]=\"!loginForm.form.valid\">Login</button>\n                </div>\n\n            </div>\n\n        </form>\n\n        </div>\n    ","import { Component, Inject, OnInit, OnDestroy } from '@angular/core';\r\n\r\nimport { LoginModel } from './Login.Model'\r\nimport { AuthenticationService, IAuthenticationService } from '../../services/authentication.service';\r\n\r\n@Component({\r\n    selector: 'login',\r\n    template: `\r\n        <div>\r\n\r\n        <form (ngSubmit)=\"onSubmit()\" #loginForm=\"ngForm\">\r\n\r\n            <div class=\"grid-container\">\r\n\r\n                <div class=\"grid-item title\">\r\n                    <h1>Login</h1>\r\n                </div>\r\n\r\n                <div class=\"grid-item label-item\">\r\n                  <label for=\"username\">Username:</label>\r\n                </div>\r\n                <div class=\"grid-item input-item\">\r\n                  <input type=\"text\" id=\"login-username\" required [(ngModel)]=\"LoginModel.UserName\" name=\"UserName\" #username=\"ngModel\">\r\n                </div>\r\n\r\n                <div class=\"grid-item label-item\">\r\n                  <label for=\"password\">Password:</label>\r\n                </div>\r\n                <div class=\"grid-item input-item\">\r\n                  <input type=\"password\" id=\"login-password\" required [(ngModel)]=\"LoginModel.Password\" name=\"Password\" #password=\"ngModel\">\r\n                </div>\r\n\r\n                <div class=\"grid-item submit\">\r\n                    <button type=\"submit\" [disabled]=\"!loginForm.form.valid\">Login</button>\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </form>\r\n\r\n        </div>\r\n    `,\r\n    styles: [`\r\n        .grid-container {\r\n            display: inline-grid;\r\n            grid-template-columns: auto auto;\r\n            background-color: #2196F3;\r\n            padding: 10px;\r\n            grid-column-gap: 10px;\r\n            grid-row-gap: 10px;\r\n            border: 2px solid rgba(0, 0, 0);\r\n        }\r\n        .grid-item {\r\n            font-size: 14px;\r\n            text-align: right;\r\n        }\r\n        .label-item {\r\n        }\r\n        .input-item {\r\n            background-color: rgba(255, 255, 255, 0.2);\r\n            border: 1px solid rgba(0, 0, 0, 0.8);\r\n        }\r\n        .title {\r\n            grid-column: 1 / span 2;\r\n            text-align: center;\r\n        }\r\n        .submit {\r\n            grid-column: 1 / span 2;\r\n            text-align: center;\r\n        }\r\n    `]\r\n})\r\nexport class LoginComponent implements OnInit, OnDestroy {\r\n\r\n    // Construction.\r\n\r\n    constructor(\r\n        @Inject(AuthenticationService) private authenticationService: IAuthenticationService\r\n    ) { }\r\n\r\n\r\n    // Angular life-cycle methods\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    ngOnDestroy() {\r\n    }\r\n\r\n\r\n    // Instance variables.\r\n\r\n    loginModel: LoginModel = new LoginModel();\r\n\r\n\r\n    // Property accessors.\r\n\r\n    public get LoginModel(): LoginModel {\r\n        return this.loginModel;\r\n    }\r\n\r\n\r\n    // Event handlers.\r\n\r\n    public onSubmit() {\r\n        this.authenticationService.Login(this.LoginModel.UserName, this.LoginModel.Password)\r\n            .subscribe(\r\n                httpResponse => {\r\n                    console.log(httpResponse)\r\n                },\r\n        );\r\n    }\r\n\r\n}\r\n","\n        <div>\n            <login></login>\n            <register></register>\n            <logout></logout>\n            <authorization></authorization>\n        </div>\n    ","import { Component, OnInit, OnDestroy } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'login-register',\r\n    template: `\r\n        <div>\r\n            <login></login>\r\n            <register></register>\r\n            <logout></logout>\r\n            <authorization></authorization>\r\n        </div>\r\n    `\r\n})\r\nexport class LoginRegisterComponent {\r\n\r\n    constructor() { }\r\n\r\n}\r\n","\n        <div>\n            <button type=\"button\" (click)=\"onClick()\">Logout</button>\n        </div>\n    ","import { Component, Inject } from '@angular/core';\r\n\r\nimport { IAuthenticationService, AuthenticationService } from '../../services/authentication.service';\r\n\r\n@Component({\r\n    selector: 'logout',\r\n    template: `\r\n        <div>\r\n            <button type=\"button\" (click)=\"onClick()\">Logout</button>\r\n        </div>\r\n    `,\r\n    styles: [`\r\n    `]\r\n})\r\nexport class LogoutComponent {\r\n\r\n    // Construction.\r\n\r\n    constructor(\r\n        @Inject(AuthenticationService) private authenticationService: IAuthenticationService\r\n    ) { }\r\n\r\n\r\n    // Event handlers.\r\n\r\n    public onClick() {\r\n        this.authenticationService.Logout()\r\n            .subscribe(\r\n                httpResponse => {\r\n                    console.log(httpResponse)\r\n                },\r\n        );\r\n    }\r\n\r\n}\r\n","\n        <div>\n\n        <form (ngSubmit)=\"onSubmit()\" #registerForm=\"ngForm\">\n\n            <div class=\"grid-container\">\n\n                <div class=\"grid-item title\">\n                    <h1>Register</h1>\n                </div>\n\n                <div class=\"grid-item label-item\">\n                  <label for=\"username\">Username:</label>\n                </div>\n                <div class=\"grid-item input-item\">\n                  <input type=\"text\" id=\"username\" required [(ngModel)]=\"RegisterModel.UserName\" name=\"UserName\" #username=\"ngModel\">\n                </div>\n\n                <div class=\"grid-item label-item\">\n                  <label for=\"password\">Password:</label>\n                </div>\n                <div class=\"grid-item input-item\">\n                  <input type=\"password\" id=\"password\" required [(ngModel)]=\"RegisterModel.Password\" name=\"Password\" #password=\"ngModel\">\n                </div>\n\n                <div class=\"grid-item label-item\">\n                  <label for=\"retypePassword\">Re-type Password:</label>\n                 </div>\n                <div class=\"grid-item input-item\">\n                 <input type=\"text\" id=\"retypePassword\" required [(ngModel)]=\"RegisterModel.RetypePassword\" name=\"RetypePassword\" #retypePassword=\"ngModel\">\n                </div>\n\n                <div class=\"grid-item label-item\">\n                    <label for=\"isAdmin\">Is administrator:</label>\n                </div>\n                <div class=\"grid-item input-item\">\n                 <input type=\"checkbox\" id=\"isAdmin\" [(ngModel)]=\"RegisterModel.IsAdmin\" name=\"IsAdmin\" #isAdmin=\"ngModel\">\n                </div>\n\n                <div class=\"grid-item submit\">\n                    <button type=\"submit\" [disabled]=\"!registerForm.form.valid\">Submit</button>\n                </div>\n\n            </div>\n\n        </form>\n\n        </div>\n    ","import { Component, Inject, OnInit, OnDestroy } from '@angular/core';\r\nimport { Observable, of, from, range, pipe, Subject, Subscription } from 'rxjs'\r\nimport { filter, catchError, reduce } from 'rxjs/operators';\r\n\r\nimport { RegisterModel } from './register.model'\r\nimport { AuthenticationService, IAuthenticationService } from '../../services/authentication.service';\r\nimport { AuthorizationService, IAuthorizationService } from '../../services/authorization.service';\r\n\r\n@Component({\r\n    selector: 'register',\r\n    template: `\r\n        <div>\r\n\r\n        <form (ngSubmit)=\"onSubmit()\" #registerForm=\"ngForm\">\r\n\r\n            <div class=\"grid-container\">\r\n\r\n                <div class=\"grid-item title\">\r\n                    <h1>Register</h1>\r\n                </div>\r\n\r\n                <div class=\"grid-item label-item\">\r\n                  <label for=\"username\">Username:</label>\r\n                </div>\r\n                <div class=\"grid-item input-item\">\r\n                  <input type=\"text\" id=\"username\" required [(ngModel)]=\"RegisterModel.UserName\" name=\"UserName\" #username=\"ngModel\">\r\n                </div>\r\n\r\n                <div class=\"grid-item label-item\">\r\n                  <label for=\"password\">Password:</label>\r\n                </div>\r\n                <div class=\"grid-item input-item\">\r\n                  <input type=\"password\" id=\"password\" required [(ngModel)]=\"RegisterModel.Password\" name=\"Password\" #password=\"ngModel\">\r\n                </div>\r\n\r\n                <div class=\"grid-item label-item\">\r\n                  <label for=\"retypePassword\">Re-type Password:</label>\r\n                 </div>\r\n                <div class=\"grid-item input-item\">\r\n                 <input type=\"text\" id=\"retypePassword\" required [(ngModel)]=\"RegisterModel.RetypePassword\" name=\"RetypePassword\" #retypePassword=\"ngModel\">\r\n                </div>\r\n\r\n                <div class=\"grid-item label-item\">\r\n                    <label for=\"isAdmin\">Is administrator:</label>\r\n                </div>\r\n                <div class=\"grid-item input-item\">\r\n                 <input type=\"checkbox\" id=\"isAdmin\" [(ngModel)]=\"RegisterModel.IsAdmin\" name=\"IsAdmin\" #isAdmin=\"ngModel\">\r\n                </div>\r\n\r\n                <div class=\"grid-item submit\">\r\n                    <button type=\"submit\" [disabled]=\"!registerForm.form.valid\">Submit</button>\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </form>\r\n\r\n        </div>\r\n    `,\r\n    styles: [ `\r\n        .grid-container {\r\n            display: inline-grid;\r\n            grid-template-columns: auto auto;\r\n            background-color: #2196F3;\r\n            padding: 10px;\r\n            grid-column-gap: 10px;\r\n            grid-row-gap: 10px;\r\n            border: 2px solid rgba(0, 0, 0);\r\n        }\r\n        .grid-item {\r\n            font-size: 14px;\r\n            text-align: right;\r\n        }\r\n        .label-item {\r\n        }\r\n        .input-item {\r\n            background-color: rgba(255, 255, 255, 0.2);\r\n            border: 1px solid rgba(0, 0, 0, 0.8);\r\n        }\r\n        .title {\r\n            grid-column: 1 / span 2;\r\n            text-align: center;\r\n        }\r\n        .submit {\r\n            grid-column: 1 / span 2;\r\n            text-align: center;\r\n        }\r\n    `]\r\n})\r\nexport class RegisterComponent implements OnInit, OnDestroy {\r\n\r\n    // Construction.\r\n\r\n    constructor(\r\n        @Inject(AuthenticationService) private authenticationService: IAuthenticationService\r\n        , @Inject(AuthorizationService) private authorizationService: IAuthorizationService\r\n    ) { }\r\n\r\n\r\n    // Angular life-cycle methods\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    ngOnDestroy() {\r\n    }\r\n\r\n\r\n    // Instance variables.\r\n\r\n    registerModel: RegisterModel = new RegisterModel();\r\n\r\n\r\n    // Property accessors.\r\n\r\n    public get RegisterModel(): RegisterModel {\r\n        return this.registerModel;\r\n    }\r\n\r\n\r\n    // Event handlers.\r\n\r\n    public onSubmit() {\r\n        this.authenticationService.Register(this.RegisterModel.UserName, this.RegisterModel.Password, this.RegisterModel.IsAdmin)\r\n            .subscribe(\r\n                httpResponse => {\r\n                    console.log(httpResponse)\r\n                    //console.log(httpResponse.body)\r\n                    //console.log(httpResponse.status)\r\n                    //console.log(httpResponse.url)\r\n                    //console.log(httpResponse.type)\r\n                    //console.log(httpResponse.statusText)\r\n                    //this.authorizationService.AddAdministratorAuthorization()\r\n                    //    .subscribe(httpResponse => { console.log(httpResponse) });\r\n                },\r\n            );\r\n    }\r\n\r\n}\r\n","export class RegisterModel {\r\n\r\n    // Construction\r\n\r\n    constructor(\r\n        private userName?: string\r\n        , private password?: string\r\n        , private retypePassword?: string\r\n        , private isAdmin?: boolean\r\n    ) {\r\n    }\r\n\r\n\r\n    // Property accessors.\r\n\r\n    public get UserName(): string {\r\n        return this.userName;\r\n    }\r\n    public set UserName(value: string) {\r\n        this.userName = value;\r\n    }\r\n\r\n    public get Password(): string {\r\n        return this.password;\r\n    }\r\n    public set Password(value: string) {\r\n        this.password = value;\r\n    }\r\n\r\n    public get RetypePassword(): string {\r\n        return this.retypePassword;\r\n    }\r\n    public set RetypePassword(value: string) {\r\n        this.retypePassword = value;\r\n    }\r\n\r\n    public get IsAdmin(): boolean {\r\n        return this.isAdmin;\r\n    }\r\n    public set IsAdmin(value: boolean) {\r\n        this.isAdmin = value;\r\n    }\r\n}\r\n","import { Injectable, Component } from '@angular/core';\r\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthenticationService } from '../services/authentication.service';\r\nimport { Router } from '@angular/router';\r\n\r\n// There are 4 types of router guards:\r\n// 1. \"CanActivate\" which checks to see if a user can visit a route.\r\n// 2. \"CanActivateChild\" which checks to see if a user can visit a routes children.\r\n// 3. \"CanDeactivate\" which checks to see if a user can exit a route.  This makes it\r\n//    possible to do something just before the user exits a particular part of the application.\r\n// 4. \"CanLoad\" which checks to see if a user can route to a module that lazy loaded.\r\n// Additionally there is \"Resolve\" which performs route data retrieval before route activation.\r\n\r\n@Injectable()\r\nexport class AuthenticationGuard implements CanActivate {\r\n\r\n    constructor(\r\n        private authenticationService: AuthenticationService,\r\n        private router: Router\r\n    ) { }\r\n\r\n    canActivate(\r\n        next: ActivatedRouteSnapshot\r\n        , state: RouterStateSnapshot\r\n    ): Observable<boolean> | Promise<boolean> | boolean {\r\n        console.log(\"Guarded!\");\r\n        if (!this.authenticationService.IsLoggedIn) {\r\n            this.router.navigate(['/']);\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n","import { Injectable, Component } from '@angular/core';\r\nimport { CanActivateChild, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthenticationService } from '../services/authentication.service';\r\nimport { Router } from '@angular/router';\r\n\r\n// There are 4 types of router guards:\r\n// 1. \"CanActivate\" which checks to see if a user can visit a route.\r\n// 2. \"CanActivateChild\" which checks to see if a user can visit a routes children.\r\n// 3. \"CanDeactivate\" which checks to see if a user can exit a route.  This makes it\r\n//    possible to do something just before the user exits a particular part of the application.\r\n// 4. \"CanLoad\" which checks to see if a user can route to a module that lazy loaded.\r\n// Additionally there is \"Resolve\" which performs route data retrieval before route activation.\r\n\r\n@Injectable()\r\nexport class CanActivateChildGuard implements CanActivateChild {\r\n\r\n    constructor(\r\n        private authenticationService: AuthenticationService,\r\n        private router: Router\r\n    ) { }\r\n\r\n    canActivateChild(\r\n        route: ActivatedRouteSnapshot           // The future route that will be activated if the guard passes, we can use itâs params property to extract the route params.\r\n        , state: RouterStateSnapshot            // The future RouterState if the guard passes, we can find the URL we are trying to navigate to from the url property.\r\n    ): Observable<boolean> | Promise<boolean> | boolean {\r\n        console.log(\"canActivateChild\");\r\n        console.log('route.url = ' + route.url);\r\n        console.log('state.url = ' + state.url);\r\n        return true;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthenticationService } from '../services/authentication.service';\r\nimport { Router } from '@angular/router';\r\n\r\n// There are 4 types of router guards:\r\n// 1. \"CanActivate\" which checks to see if a user can visit a route.\r\n// 2. \"CanActivateChild\" which checks to see if a user can visit a routes children.\r\n// 3. \"CanDeactivate\" which checks to see if a user can exit a route.  This makes it\r\n//    possible to do something just before the user exits a particular part of the application.\r\n// 4. \"CanLoad\" which checks to see if a user can route to a module that lazy loaded.\r\n// Additionally there is \"Resolve\" which performs route data retrieval before route activation.\r\n\r\n@Injectable()\r\nexport class CanActivateGuard implements CanActivate {\r\n\r\n    constructor(\r\n        private authenticationService: AuthenticationService,\r\n        private router: Router\r\n    ) { }\r\n\r\n    canActivate(\r\n        route: ActivatedRouteSnapshot\r\n        , state: RouterStateSnapshot\r\n    ): Observable<boolean> | Promise<boolean> | boolean {\r\n        console.log(\"canActivate\");\r\n        console.log('route.url = ' + route.url);\r\n        console.log('state.url = ' + state.url);\r\n        return true;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { CanDeactivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthenticationService } from '../services/authentication.service';\r\nimport { Router } from '@angular/router';\r\n\r\n// There are 4 types of router guards:\r\n// 1. \"CanActivate\" which checks to see if a user can visit a route.\r\n// 2. \"CanActivateChild\" which checks to see if a user can visit a routes children.\r\n// 3. \"CanDeactivate\" which checks to see if a user can exit a route.  This makes it\r\n//    possible to do something just before the user exits a particular part of the application.\r\n// 4. \"CanLoad\" which checks to see if a user can route to a module that lazy loaded.\r\n// Additionally there is \"Resolve\" which performs route data retrieval before route activation.\r\n\r\n\r\n@Injectable()\r\nexport class CanDeactivateGuard<T> implements CanDeactivate<T> {\r\n\r\n    constructor(\r\n        private authenticationService: AuthenticationService,\r\n        private router: Router\r\n    ) { }\r\n\r\n    canDeactivate(\r\n        component: T,\r\n        route: ActivatedRouteSnapshot           // The future route that will be activated if the guard passes, we can use itâs params property to extract the route params.\r\n        , state: RouterStateSnapshot            // The future RouterState if the guard passes, we can find the URL we are trying to navigate to from the url property.\r\n    ): Observable<boolean> | Promise<boolean> | boolean {\r\n        console.log(\"canDeactivate\");\r\n        console.log('route.url = ' + route.url);\r\n        console.log('state.url = ' + state.url);\r\n        return true;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { CanLoad, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthenticationService } from '../services/authentication.service';\r\nimport { Router, Route } from '@angular/router';\r\n\r\n// There are 4 types of router guards:\r\n// 1. \"CanActivate\" which checks to see if a user can visit a route.\r\n// 2. \"CanActivateChild\" which checks to see if a user can visit a routes children.\r\n// 3. \"CanDeactivate\" which checks to see if a user can exit a route.  This makes it\r\n//    possible to do something just before the user exits a particular part of the application.\r\n// 4. \"CanLoad\" which checks to see if a user can route to a module that lazy loaded.\r\n// Additionally there is \"Resolve\" which performs route data retrieval before route activation.\r\n\r\n@Injectable()\r\nexport class CanLoadGuard implements CanLoad {\r\n\r\n    constructor(\r\n        private authenticationService: AuthenticationService,\r\n        private router: Router\r\n    ) { }\r\n\r\n    canLoad(\r\n        route: Route\r\n    ): Observable<boolean> | Promise<boolean> | boolean {\r\n        console.log(\"canLoad\");\r\n        console.log('route.path = ' + route.path);\r\n        return true;\r\n    }\r\n}\r\n","import { Inject } from '@angular/core';\r\nimport { HttpClient, HttpResponse, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\n\r\nexport interface IAuthenticationService {\r\n    Login(userName: string, password: string): Observable<{} | HttpResponse<any>>;\r\n    Logout(): Observable<{} | HttpResponse<any>>;\r\n    Register(userName: string, password: string, isAdmin: boolean): Observable<{} | HttpResponse<any>>;\r\n    IsLoggedIn(): boolean;\r\n    Test(): Observable<{} | HttpResponse<any>>;\r\n}\r\n\r\n// Service responsible for all things authentication.\r\nexport class AuthenticationService implements IAuthenticationService {\r\n\r\n    // Construction.\r\n    constructor(\r\n        private httpClient: HttpClient\r\n        , @Inject('BASE_URL') private baseUrl: string\r\n    ) {\r\n    }\r\n\r\n\r\n    Login(userName: string, password: string): Observable<{} | HttpResponse<any>> {\r\n        return this.httpClient.post(\r\n            this.baseUrl + 'Authentication/Login',\r\n            JSON.stringify({ UserName: userName, Password: password }),\r\n            {\r\n                observe: 'response'     // Want entire HTTP response returned.\r\n            }\r\n        ).pipe(\r\n            catchError(this.onError),\r\n            //map(httpResponse => (<HttpResponse<any>>httpResponse).body)\r\n        );\r\n    }\r\n\r\n    Logout(): Observable<{} | HttpResponse<any>> {\r\n        return this.httpClient.post(\r\n            this.baseUrl + 'Authentication/Logout',\r\n            \"\",\r\n            {\r\n                observe: 'response'     // Want entire HTTP response returned.\r\n            }\r\n        ).pipe(\r\n            catchError(this.onError),\r\n        );\r\n    }\r\n\r\n    Register(userName: string, password: string, isAdmin: boolean): Observable<{} | HttpResponse<any>> {\r\n        return this.httpClient.post(\r\n            this.baseUrl + 'Authentication/Register',\r\n            JSON.stringify({ UserName: userName, Password: password, IsAdmin: isAdmin }),\r\n            {\r\n                observe: 'response'     // Want entire HTTP response returned.\r\n            }\r\n        ).pipe(\r\n            catchError(this.onError),\r\n            //map(httpResponse => (<HttpResponse<any>>httpResponse).body)\r\n        );\r\n    }\r\n\r\n    IsLoggedIn(): boolean {\r\n        return true;\r\n    }\r\n\r\n    Test(): Observable<{} | HttpResponse<any>> {\r\n        return this.httpClient.get(\r\n            this.baseUrl + 'Authentication/Test',\r\n            {\r\n                observe: 'response'     // Want entire HTTP response returned.\r\n            }\r\n        ).pipe(\r\n            catchError(this.onError),\r\n            //map(httpResponse => (<HttpResponse<any>>httpResponse).body)\r\n        );\r\n    } \r\n\r\n\r\n    // Private methods.\r\n\r\n    private onError(error: HttpErrorResponse): Observable<never> {\r\n        if (error.error instanceof ErrorEvent) {\r\n            // A client-side or network error occurred. Handle it accordingly.\r\n            console.error('An error occurred:', error.error.message);\r\n        } else {\r\n            // The backend returned an unsuccessful response code.\r\n            // The response body may contain clues as to what went wrong,\r\n            console.error(\r\n                `Backend returned code ${error.status}, ` +\r\n                `body was: ${error.error}`);\r\n        }\r\n        // return an observable with a user-facing error message\r\n        return throwError('Something bad happened; please try again later.');\r\n    };\r\n}\r\n","import { Inject } from '@angular/core';\r\nimport { HttpClient, HttpResponse, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\n\r\nexport interface IAuthorizationService {\r\n    AddAdministratorAuthorization(): Observable<{} | HttpResponse<any>>\r\n}\r\n\r\n// Service responsible for all things authorization.\r\nexport class AuthorizationService implements IAuthorizationService {\r\n\r\n    // Construction.\r\n    constructor(\r\n        private httpClient: HttpClient\r\n        , @Inject('BASE_URL') private baseUrl: string\r\n    ) {\r\n    }\r\n\r\n\r\n    AddAdministratorAuthorization(): Observable<{} | HttpResponse<any>> {\r\n        return this.httpClient.post(\r\n            this.baseUrl + 'Authorization/AddAdministratorAuthorization',\r\n            null,\r\n            {\r\n                observe: 'response'     // Want entire HTTP response returned.\r\n            }\r\n        ).pipe(\r\n            catchError(this.onError),\r\n            //map(httpResponse => (<HttpResponse<any>>httpResponse).body)\r\n        );\r\n    }\r\n\r\n\r\n    // Private methods.\r\n\r\n    private onError(error: HttpErrorResponse): Observable<never> {\r\n        if (error.error instanceof ErrorEvent) {\r\n            // A client-side or network error occurred. Handle it accordingly.\r\n            console.error('An error occurred:', error.error.message);\r\n        } else {\r\n            // The backend returned an unsuccessful response code.\r\n            // The response body may contain clues as to what went wrong,\r\n            console.error(\r\n                `Backend returned code ${error.status}, ` +\r\n                `body was: ${error.error}`);\r\n        }\r\n        // return an observable with a user-facing error message\r\n        return throwError('Something bad happened; please try again later.');\r\n    };\r\n}\r\n","<div>\r\n  Component #1 of Feature Module #1\r\n</div>\r\n<div>\r\n  {{SampleServiceString}}\r\n</div>\r\n<div>\r\n  {{SampleResolverServiceString}}\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\n\r\nimport { SampleService } from '../../../core-module/Sample.service';\r\n\r\n@Component({\r\n  selector: 'feat1-comp1',\r\n  templateUrl: './feat1-comp1.component.html',\r\n  styleUrls: ['./feat1-comp1.component.css']\r\n})\r\nexport class Feat1Comp1Component implements OnInit {\r\n\r\n  // Construction.\r\n\r\n  constructor(\r\n    private activatedRoute: ActivatedRoute,\r\n    private sampleService: SampleService\r\n  ) {\r\n  }\r\n\r\n  data: any;\r\n\r\n  ngOnInit() {\r\n    this.data = this.activatedRoute.snapshot.data;\r\n  }\r\n\r\n  public get SampleServiceString(): string {\r\n    return this.sampleService.SampleString;\r\n  }\r\n\r\n  public get SampleResolverServiceString(): string {\r\n    return this.data.message;\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { Feat1Comp1Component } from './feat1-comp1-component/feat1-comp1.component';\r\nimport { SampleResolverService } from '../../core-module/resolvers/sample-resolver.service';\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: Feat1Comp1Component, resolve: { message: SampleResolverService } },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class Feature1RoutingModule { }\r\n\r\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { Feature1RoutingModule } from './feature1-routing.module';\nimport { Feat1Comp1Component } from './feat1-comp1-component/feat1-comp1.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    Feature1RoutingModule\n  ],\n  declarations: [\n    Feat1Comp1Component,\n  ]\n})\nexport class Feature1Module {\n}\n","<div>\r\n  Component #1 of Feature Module #2\r\n</div>\r\n<div>\r\n  String is {{ServiceString}}\r\n</div>\r\n<div>\r\n  <a [routerLink]=\"[{ outlets: { primary: ['feat2-comp2'] } } ]\">\r\n    <span class='glyphicon glyphicon-home'></span> Load 'src/app/views/feature2-module/feat2-comp2-component/feat2-comp2.component#Feat2Comp2Component' below.\r\n  </a>\r\n</div>\r\n<router-outlet></router-outlet>\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\nimport { SampleService } from '../../../core-module/Sample.service';\r\n\r\n@Component({\r\n  selector: 'feat2-comp1',\r\n  templateUrl: './feat2-comp1.component.html',\r\n  styleUrls: ['./feat2-comp1.component.css']\r\n})\r\nexport class Feat2Comp1Component implements OnInit {\r\n\r\n  constructor(private sampleService: SampleService) {\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  public get ServiceString(): string {\r\n    return this.sampleService.SampleString;\r\n  }\r\n\r\n}\r\n","\n    <p>\n      Child Component #2 of Feature Module #2\n    </p>\n    <input type=\"button\" value=\"Login\" (click)=\"OnClick($event)\" />\n\n  ","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { IAuthenticationService, AuthenticationService } from '../../authentication-module/services/authentication.service';\r\nimport { browser } from 'protractor';\r\n\r\n@Component({\r\n  selector: 'feat2-comp2',\r\n  template: `\r\n    <p>\r\n      Child Component #2 of Feature Module #2\r\n    </p>\r\n    <input type=\"button\" value=\"Login\" (click)=\"OnClick($event)\" />\r\n\r\n  `,\r\n  styleUrls: ['./feat2-comp2.component.css']\r\n})\r\nexport class Feat2Comp2Component implements OnInit {\r\n\r\n    constructor(\r\n        @Inject(AuthenticationService) private authenticationService : IAuthenticationService\r\n    ) {\r\n    }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    public forecasts: WeatherForecast[];\r\n\r\n\r\n    OnClick(ev: MouseEvent) {\r\n\r\n        this.authenticationService.Test()\r\n            .subscribe(\r\n                httpResponse => {\r\n                    console.log(httpResponse)\r\n                },\r\n        );\r\n\r\n    }\r\n}\r\n\r\ninterface WeatherForecast {\r\n  dateFormatted: string;\r\n  temperatureC: number;\r\n  temperatureF: number;\r\n  summary: string;\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { Feat2Comp1Component } from './feat2-comp1-component/feat2-comp1.component';\r\nimport { Feat2Comp2Component } from './feat2-comp2-component/feat2-comp2.component';\r\nimport { CanActivateChildGuard } from '../authentication-module/guards/can-activate-child.guard';\r\nimport { CanDeactivateGuard } from '../authentication-module/guards/can-deactivate.guard';\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: Feat2Comp1Component, canActivateChild: [CanActivateChildGuard], canDeactivate: [CanDeactivateGuard], children: [\r\n      { path: 'feat2-comp2', component: Feat2Comp2Component },\r\n    ]\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class Feature2RoutingModule { }\r\n\r\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { Feature2RoutingModule } from './feature2-routing.module';\nimport { Feat2Comp1Component } from './feat2-comp1-component/feat2-comp1.component';\nimport { Feat2Comp2Component } from './feat2-comp2-component/feat2-comp2.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    Feature2RoutingModule,\n  ],\n  declarations: [\n    Feat2Comp1Component,\n    Feat2Comp2Component\n  ]\n})\nexport class Feature2Module {\n}\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { NoLazyLoadRoutingModule } from './no-lazy-load-routing.module';\r\nimport { NoLazyLoadPanelComponent } from './no-lazy-load-panel/no-lazy-load-panel.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    NoLazyLoadRoutingModule\r\n ],\r\n  declarations: [NoLazyLoadPanelComponent]\r\n})\r\nexport class NoLazyLoadModule {\r\n\r\n\r\n\r\n}\r\n\r\n// By defining this function and referencing it in app-routing.module.ts we force the eager loading of this feature module\r\n// but at the same time allow the routing for this feature module to be contained completely in no-lazy-load-routing.module.ts.\r\n// (Which means this module's components don't have to be imported into app-routing.module.ts.  Which is a way to insure that\r\n// your application is indepedent and well-structured.)\r\nexport function NoLazyLoadingEntrypoint() {\r\n  return NoLazyLoadModule;\r\n}\r\n","// Added to support Angular Universal.\r\nexport { AppServerModule } from './app/app.server.module';\r\n","module.exports = require(\"@angular/animations\");","module.exports = require(\"@angular/animations/browser\");","module.exports = require(\"@angular/common\");","module.exports = require(\"@angular/common/http\");","module.exports = require(\"@angular/core\");","module.exports = require(\"@angular/forms\");","module.exports = require(\"@angular/http\");","module.exports = require(\"@angular/platform-browser\");","module.exports = require(\"@angular/platform-browser/animations\");","module.exports = require(\"@angular/platform-server\");","module.exports = require(\"@angular/router\");","module.exports = require(\"@nguniversal/module-map-ngfactory-loader\");","module.exports = require(\"rxjs\");","module.exports = require(\"rxjs/operators\");"],"sourceRoot":""}